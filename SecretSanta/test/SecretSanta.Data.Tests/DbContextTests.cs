using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System;
using System.Threading.Tasks;
using System.IO;//cal: both this and Reflection were used to debug our current directory at runtime.
using System.Reflection;
//using DbContext = SecretSanta.Data.DbContext;

namespace SecretSanta.Data.Tests
{
    [TestClass]
    public class DbContextTests
    {
        [TestMethod]
        public void Add_NewGift_Success()
        {
            string workFrom = @"..\..\..\..\..\src\SecretSanta.Data\";//cal: we're using this so that it work with the database in SecretSanta.Data
            Directory.SetCurrentDirectory(workFrom);
            DbContext dbContext = new DbContext();
            int beforeCount = dbContext.Gifts.Count();
            //dbContext.Gifts.Add(new Gift(){Id=42, Title="Colgate"});
            dbContext.Gifts.Add(new Gift(){Title="Colgate " + Guid.NewGuid().ToString(), Url="www." + Guid.NewGuid().ToString() + ".com"});
            dbContext.SaveChanges();

            Assert.AreEqual<int>(beforeCount+1, dbContext.Gifts.Count());
        }

        [TestMethod]
        async public Task Add_NewGiftAsync_Success()//cal:changed to this since were using SaveChangesAsync() over SaveChanges()
        {
            using DbContext dbContext = new DbContext();//cal: we using "using" here so it cleans up after the method.
            {
                //string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                int beforeCount = dbContext.Gifts.Count();
                
                //dbContext.Gifts.Add(new Gift(){Id=42, Title="Colgate"});//cal: we removed id since if we did, a new one would be autogenerated.
                //dbContext.Gifts.Add(new Gift(){Title="Colgate" + Guid.NewGuid().ToString()});
                
                Gift @gift = new Gift(){Title = "Colgate" +Guid.NewGuid().ToString()};
                int id = @gift.Id;
                dbContext.Gifts.Add(@gift);
                

                Assert.AreEqual<int>(0, @gift.Id);//cal: no db interraction yet till SaveChanges.
                //dbContext.SaveChanges();
                await dbContext.SaveChangesAsync();

                
                Assert.AreEqual<int>(beforeCount+1, dbContext.Gifts.Count());
            }
        }
    }
}
